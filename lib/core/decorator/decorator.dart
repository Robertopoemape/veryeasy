import 'dart:async';

import 'package:veryeasy/core/exceptions/c_exceptions.dart';
import 'package:veryeasy/core/exceptions/failure.dart';
import 'package:veryeasy/core/utils/methods/methods.dart';

Future<Either<Failure, T>> futureDecorator<T>(
  Future<T> Function() callback,
) async {
  try {
    final result = await callback();
    return Either<Failure, T>.right(result);
  } on CException catch (e) {
    final err = e;

    return Either<Failure, T>.left(
      err.when(
        cacheException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            CacheFailure(message: message),
        conflictException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            ConflictFailure(message: message),
        connectTimeOutException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            ConnectionTimeoutFailure(message: message),
        parametersException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            ErrorParametersFailure(message: message),
        internalServerErrorException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            InternalServerErrorFailure(message: message),
        invalidCredentialsException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            InvalidCredentialFailure(message: message),
        localException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            LocalFailure(message: message),
        networkConnectionException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            NetworkConnectionFailure(message: message),
        notFoundException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            NotFoundFailure(message: message),
        othersException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            OthersFailure(message: message),
        parserErrorException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            ParserErrorFailure(message: message),
        requestTimeOutException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            RequestTimeOutFailure(message: message),
        serverCancelException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            ServerCancelFailure(message: message),
        serverSocketException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            ServerSocketFailure(message: message),
        serviceUnAvailableException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            ServiceUnAvailableFailure(message: message),
        sessionExpiredException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            SessionExpiredFailure(message: message),
        sessionNotFoundException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            SessionNotFoundFailure(message: message),
        undefinedException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            UndefinedFailure(message: message),
        undefinedOrUrlNotExistException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            UndefinedOrUrlNotExistFailure(message: message),
        registerInvalidException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            RegisterInvalidFailure(message: message),
        emptyDataException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            EmptyDataFailure(message: message),
        businessErrorException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            BusinessErrorFailure(message: message),
        firebaseNetworkException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseNetworkFailure(message: message),
        firebaseTooManyRequestsException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseTooManyRequestsFailure(message: message),
        firebaseInvalidUserException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseInvalidUserFailure(message: message),
        firebaseUserDisabledException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseUserDisabledFailure(message: message),
        firebaseUserNotFoundException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseUserNotFoundFailure(message: message),
        firebaseUserCollisionException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseUserCollisionFailure(message: message),
        firebaseCredentialAlreadyInUseException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseCredentialAlreadyInUseFailure(message: message),
        firebaseWeakPasswordException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseWeakPasswordFailure(message: message),
        firebaseExpiredActionCodeException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseExpiredActionCodeFailure(message: message),
        firebaseInvalidActionCodeException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseInvalidActionCodeFailure(message: message),
        firebaseInvalidCredentialException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseInvalidCredentialFailure(message: message),
        firebaseOperationNotAllowedException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseOperationNotAllowedFailure(message: message),
        firebaseAuthRecentLoginRequiredException: (
          String? message,
          StackTrace? stackTrace,
          dynamic error,
          bool? report,
        ) =>
            FirebaseAuthRecentLoginRequiredFailure(message: message),
      ),
    );
  }
}
